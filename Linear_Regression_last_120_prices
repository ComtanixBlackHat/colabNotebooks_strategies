{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"_zv8Xvm3LhVB","executionInfo":{"status":"ok","timestamp":1727460103194,"user_tz":240,"elapsed":5651,"user":{"displayName":"Saad Zaman","userId":"06624906604362305564"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","from sklearn.metrics import mean_squared_error, mean_absolute_error  #\n","import yfinance as yf\n","# import vectorbt as vbt\n","# import talib\n","import requests\n","import json\n","import math\n","import pandas_datareader as web\n","import time\n","import datetime\n","from scipy import stats\n","# import pandas_ta as ta\n","import matplotlib.pyplot as plt\n"]},{"cell_type":"code","source":["import gdown\n","import pandas as pd\n","\n","# Step 1: Google Drive file ID\n","file_id = '1wJdkrO5hbWx45WzdMjzt9-sqIXWpq2FX'\n","url = f'https://drive.google.com/uc?id={file_id}'\n","print(url)\n","\n","# Step 2: Download the file\n","gdown.download(url, 'data.csv', quiet=False)\n","\n","# Step 3: Read the CSV\n","df = pd.read_csv('data.csv')\n","print(df.head())\n","# print(len(df))\n"],"metadata":{"id":"wRP-1K1ALifI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727460109061,"user_tz":240,"elapsed":5870,"user":{"displayName":"Saad Zaman","userId":"06624906604362305564"}},"outputId":"e8a1c1dc-04e8-4bf5-e0b8-f0ef489bc05f"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["https://drive.google.com/uc?id=1wJdkrO5hbWx45WzdMjzt9-sqIXWpq2FX\n"]},{"output_type":"stream","name":"stderr","text":["Downloading...\n","From: https://drive.google.com/uc?id=1wJdkrO5hbWx45WzdMjzt9-sqIXWpq2FX\n","To: /content/data.csv\n","100%|██████████| 9.02M/9.02M [00:00<00:00, 74.0MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["            date      open      high       low     close   volume\n","0  1717200000000  67570.00  67570.00  67570.00  67570.00  0.00099\n","1  1717200060000  67570.28  67570.28  67570.28  67570.28  0.00002\n","2  1717200120000  67570.00  67570.03  67570.00  67570.03  0.00014\n","3  1717200180000  67577.74  67577.74  67577.74  67577.74  0.00042\n","4  1717200240000  67610.13  67640.00  67610.13  67640.00  0.00097\n"]}]},{"cell_type":"code","source":["\n","\n","window_size = 120\n","\n","\n","X = []\n","y = []\n","\n","\n","for i in range(len(df) - window_size):\n","    X.append(df['close'].iloc[i:i+window_size].values)  # Last 120 close prices as features\n","    y.append(df['close'].iloc[i+window_size])  # 121st value as target\n","\n","X = np.array(X)\n","y = np.array(y)"],"metadata":{"id":"eTyRRt9ELv0j","executionInfo":{"status":"ok","timestamp":1727460132909,"user_tz":240,"elapsed":23852,"user":{"displayName":"Saad Zaman","userId":"06624906604362305564"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)\n","\n","\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","\n","model = LinearRegression()\n","model.fit(X_train_scaled, y_train)"],"metadata":{"id":"YRbR8qpUL2Ch","colab":{"base_uri":"https://localhost:8080/","height":325},"executionInfo":{"status":"error","timestamp":1727460133563,"user_tz":240,"elapsed":660,"user":{"displayName":"Saad Zaman","userId":"06624906604362305564"}},"outputId":"727b266b-7168-4186-9596-df8012d3d403"},"execution_count":4,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'StandardScaler' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-6d33212c0b71>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mscaler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mX_train_scaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mX_test_scaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'StandardScaler' is not defined"]}]},{"cell_type":"code","source":["predictions = model.predict(X_test_scaled)\n","\n","comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': predictions})\n","print(comparison_df.head())\n","\n","\n","mse = mean_squared_error(y_test, predictions)\n","mae = mean_absolute_error(y_test, predictions)\n","print(f'Mean Squared Error: {mse}')\n","print(f'Mean Absolute Error: {mae}')"],"metadata":{"id":"H2ko469DL78R","colab":{"base_uri":"https://localhost:8080/","height":325},"executionInfo":{"status":"error","timestamp":1727460154555,"user_tz":240,"elapsed":202,"user":{"displayName":"Saad Zaman","userId":"06624906604362305564"}},"outputId":"4be2f225-f888-44e0-895b-82c61ac62d37"},"execution_count":6,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'model' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-876cec4d800f>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_scaled\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mcomparison_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'Actual'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Predicted'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcomparison_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}]},{"cell_type":"code","source":["\n","plt.figure(figsize=(10, 6))\n","plt.plot(comparison_df.index, comparison_df['Actual'], label='Actual Prices', marker='o')\n","plt.plot(comparison_df.index, comparison_df['Predicted'], label='Predicted Prices', marker='x')\n","plt.title('Actual vs Predicted Prices')\n","plt.xlabel('Index')\n","plt.ylabel('Price')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n","\n","# Plot prediction errors\n","prediction_errors = y_test - predictions\n","plt.figure(figsize=(10, 6))\n","plt.plot(comparison_df.index, prediction_errors, label='Prediction Errors', marker='s', color='red')\n","plt.title('Prediction Errors')\n","plt.xlabel('Index')\n","plt.ylabel('Error')\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"id":"oiQDzT-BL8i0","colab":{"base_uri":"https://localhost:8080/","height":397},"executionInfo":{"status":"error","timestamp":1727460150023,"user_tz":240,"elapsed":226,"user":{"displayName":"Saad Zaman","userId":"06624906604362305564"}},"outputId":"ab9f82e2-7bf6-444f-b891-764f03f80833"},"execution_count":5,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'comparison_df' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-a05e05a46967>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcomparison_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcomparison_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Actual'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Actual Prices'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'o'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcomparison_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcomparison_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Predicted'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Predicted Prices'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'x'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Actual vs Predicted Prices'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Index'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'comparison_df' is not defined"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 0 Axes>"]},"metadata":{}}]}]}