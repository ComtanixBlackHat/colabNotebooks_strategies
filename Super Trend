{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"collapsed":true,"id":"ytfjK_EZRuCa","outputId":"63e4308f-dcf2-433b-e74b-eb8d20e36a4c","executionInfo":{"status":"ok","timestamp":1724127054958,"user_tz":-300,"elapsed":197602,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting vectorbt\n","  Downloading vectorbt-0.26.2.tar.gz (485 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m485.9/485.9 kB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: numpy<2.0.0,>=1.16.5 in /usr/local/lib/python3.10/dist-packages (from vectorbt) (1.26.4)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from vectorbt) (2.1.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from vectorbt) (1.13.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from vectorbt) (3.7.1)\n","Requirement already satisfied: plotly>=4.12.0 in /usr/local/lib/python3.10/dist-packages (from vectorbt) (5.15.0)\n","Requirement already satisfied: ipywidgets>=7.0.0 in /usr/local/lib/python3.10/dist-packages (from vectorbt) (7.7.1)\n","Collecting dill (from vectorbt)\n","  Downloading dill-0.3.8-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from vectorbt) (4.66.5)\n","Collecting dateparser (from vectorbt)\n","  Downloading dateparser-1.2.0-py2.py3-none-any.whl.metadata (28 kB)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.10/dist-packages (from vectorbt) (2.34.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from vectorbt) (1.3.2)\n","Collecting schedule (from vectorbt)\n","  Downloading schedule-1.2.2-py3-none-any.whl.metadata (3.8 kB)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from vectorbt) (2.32.3)\n","Requirement already satisfied: pytz in /usr/local/lib/python3.10/dist-packages (from vectorbt) (2024.1)\n","Collecting mypy_extensions (from vectorbt)\n","  Downloading mypy_extensions-1.0.0-py3-none-any.whl.metadata (1.1 kB)\n","Collecting numba<0.57.0,>=0.56.0 (from vectorbt)\n","  Downloading numba-0.56.4-cp310-cp310-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (2.8 kB)\n","Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.0.0->vectorbt) (5.5.6)\n","Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.0.0->vectorbt) (0.2.0)\n","Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.0.0->vectorbt) (5.7.1)\n","Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.0.0->vectorbt) (3.6.8)\n","Requirement already satisfied: ipython>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.0.0->vectorbt) (7.34.0)\n","Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.0.0->vectorbt) (3.0.11)\n","Collecting llvmlite<0.40,>=0.39.0dev0 (from numba<0.57.0,>=0.56.0->vectorbt)\n","  Downloading llvmlite-0.39.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.7 kB)\n","Collecting numpy<2.0.0,>=1.16.5 (from vectorbt)\n","  Downloading numpy-1.23.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.3 kB)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from numba<0.57.0,>=0.56.0->vectorbt) (71.0.4)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly>=4.12.0->vectorbt) (9.0.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly>=4.12.0->vectorbt) (24.1)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from dateparser->vectorbt) (2.8.2)\n","Requirement already satisfied: regex!=2019.02.19,!=2021.8.27 in /usr/local/lib/python3.10/dist-packages (from dateparser->vectorbt) (2024.5.15)\n","Requirement already satisfied: tzlocal in /usr/local/lib/python3.10/dist-packages (from dateparser->vectorbt) (5.2)\n","Requirement already satisfied: pillow>=8.3.2 in /usr/local/lib/python3.10/dist-packages (from imageio->vectorbt) (9.4.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->vectorbt) (1.2.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->vectorbt) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->vectorbt) (4.53.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->vectorbt) (1.4.5)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->vectorbt) (3.1.2)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->vectorbt) (2024.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->vectorbt) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->vectorbt) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->vectorbt) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->vectorbt) (2024.7.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->vectorbt) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->vectorbt) (3.5.0)\n","Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.0.0->vectorbt) (6.1.12)\n","Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.0.0->vectorbt) (6.3.3)\n","Collecting jedi>=0.16 (from ipython>=4.0.0->ipywidgets>=7.0.0->vectorbt)\n","  Using cached jedi-0.19.1-py2.py3-none-any.whl.metadata (22 kB)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->vectorbt) (4.4.2)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->vectorbt) (0.7.5)\n","Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->vectorbt) (3.0.47)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->vectorbt) (2.16.1)\n","Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->vectorbt) (0.2.0)\n","Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->vectorbt) (0.1.7)\n","Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->vectorbt) (4.9.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil->dateparser->vectorbt) (1.16.0)\n","Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (6.5.5)\n","Requirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=4.0.0->ipywidgets>=7.0.0->vectorbt) (0.8.4)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (3.1.4)\n","Requirement already satisfied: pyzmq<25,>=17 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (24.0.1)\n","Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (23.1.0)\n","Requirement already satisfied: jupyter-core>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (5.7.2)\n","Requirement already satisfied: nbformat in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (5.10.4)\n","Requirement already satisfied: nbconvert>=5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (6.5.4)\n","Requirement already satisfied: nest-asyncio>=1.5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (1.6.0)\n","Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (1.8.3)\n","Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (0.18.1)\n","Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (0.20.0)\n","Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (1.1.0)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=4.0.0->ipywidgets>=7.0.0->vectorbt) (0.7.0)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=4.0.0->ipywidgets>=7.0.0->vectorbt) (0.2.13)\n","Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core>=4.6.1->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (4.2.2)\n","Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (0.2.4)\n","Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (4.9.4)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (4.12.3)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (6.1.0)\n","Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (0.7.1)\n","Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (0.4)\n","Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (0.3.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (2.1.5)\n","Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (0.8.4)\n","Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (0.10.0)\n","Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (1.5.1)\n","Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (1.3.0)\n","Requirement already satisfied: fastjsonschema>=2.15 in /usr/local/lib/python3.10/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (2.20.0)\n","Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (4.23.0)\n","Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (21.2.0)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (24.2.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (2023.12.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (0.35.1)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (0.20.0)\n","Requirement already satisfied: jupyter-server<3,>=1.8 in /usr/local/lib/python3.10/dist-packages (from notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (1.24.0)\n","Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (1.17.0)\n","Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (2.6)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (0.5.1)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (2.22)\n","Requirement already satisfied: anyio<4,>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (3.7.1)\n","Requirement already satisfied: websocket-client in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (1.8.0)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (1.3.1)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->vectorbt) (1.2.2)\n","Downloading numba-0.56.4-cp310-cp310-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (3.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.5/3.5 MB\u001b[0m \u001b[31m24.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading numpy-1.23.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m17.1/17.1 MB\u001b[0m \u001b[31m53.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading dateparser-1.2.0-py2.py3-none-any.whl (294 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m295.0/295.0 kB\u001b[0m \u001b[31m14.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading dill-0.3.8-py3-none-any.whl (116 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m116.3/116.3 kB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n","Downloading schedule-1.2.2-py3-none-any.whl (12 kB)\n","Downloading llvmlite-0.39.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (34.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m34.6/34.6 MB\u001b[0m \u001b[31m22.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached jedi-0.19.1-py2.py3-none-any.whl (1.6 MB)\n","Building wheels for collected packages: vectorbt\n","  Building wheel for vectorbt (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for vectorbt: filename=vectorbt-0.26.2-py3-none-any.whl size=527327 sha256=d8275c8a76c7e94ae85ada4334a299f497bd102b3adea92008d8465976119e1a\n","  Stored in directory: /root/.cache/pip/wheels/35/a3/d2/ae1a8cbf659fffc7d1890123df1a7fa2e7f6df587c1dca71cd\n","Successfully built vectorbt\n","Installing collected packages: schedule, numpy, mypy_extensions, llvmlite, jedi, dill, numba, dateparser, vectorbt\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 1.26.4\n","    Uninstalling numpy-1.26.4:\n","      Successfully uninstalled numpy-1.26.4\n","  Attempting uninstall: llvmlite\n","    Found existing installation: llvmlite 0.43.0\n","    Uninstalling llvmlite-0.43.0:\n","      Successfully uninstalled llvmlite-0.43.0\n","  Attempting uninstall: numba\n","    Found existing installation: numba 0.60.0\n","    Uninstalling numba-0.60.0:\n","      Successfully uninstalled numba-0.60.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","xgboost 2.1.1 requires nvidia-nccl-cu12; platform_system == \"Linux\" and platform_machine != \"aarch64\", which is not installed.\n","albucore 0.0.13 requires numpy<2,>=1.24.4, but you have numpy 1.23.5 which is incompatible.\n","albumentations 1.4.13 requires numpy>=1.24.4, but you have numpy 1.23.5 which is incompatible.\n","chex 0.1.86 requires numpy>=1.24.1, but you have numpy 1.23.5 which is incompatible.\n","cudf-cu12 24.4.1 requires numba>=0.57, but you have numba 0.56.4 which is incompatible.\n","pandas-stubs 2.1.4.231227 requires numpy>=1.26.0; python_version < \"3.13\", but you have numpy 1.23.5 which is incompatible.\n","rmm-cu12 24.4.0 requires numba>=0.57, but you have numba 0.56.4 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed dateparser-1.2.0 dill-0.3.8 jedi-0.19.1 llvmlite-0.39.1 mypy_extensions-1.0.0 numba-0.56.4 numpy-1.23.5 schedule-1.2.2 vectorbt-0.26.2\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["numpy"]},"id":"d6ca0d1327b94cbcb4fb5031a690feec"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Collecting condacolab\n","  Downloading condacolab-0.1.9-py3-none-any.whl.metadata (5.6 kB)\n","Downloading condacolab-0.1.9-py3-none-any.whl (7.2 kB)\n","Installing collected packages: condacolab\n","Successfully installed condacolab-0.1.9\n","⏬ Downloading https://github.com/conda-forge/miniforge/releases/download/23.11.0-0/Mambaforge-23.11.0-0-Linux-x86_64.sh...\n","📦 Installing...\n","📌 Adjusting configuration...\n","🩹 Patching environment...\n","⏲ Done in 0:00:18\n","🔁 Restarting kernel...\n","Channels:\n"," - conda-forge\n","Platform: linux-64\n","Collecting package metadata (repodata.json): - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\bdone\n","Solving environment: / \b\b- \b\b\\ \b\bdone\n","\n","\n","==> WARNING: A newer version of conda exists. <==\n","    current version: 23.11.0\n","    latest version: 24.7.1\n","\n","Please update conda by running\n","\n","    $ conda update -n base -c conda-forge conda\n","\n","\n","\n","## Package Plan ##\n","\n","  environment location: /usr/local\n","\n","  added / updated specs:\n","    - ta-lib\n","\n","\n","The following packages will be downloaded:\n","\n","    package                    |            build\n","    ---------------------------|-----------------\n","    ca-certificates-2024.7.4   |       hbcca054_0         151 KB  conda-forge\n","    certifi-2024.7.4           |     pyhd8ed1ab_0         156 KB  conda-forge\n","    libblas-3.9.0              |23_linux64_openblas          15 KB  conda-forge\n","    libcblas-3.9.0             |23_linux64_openblas          14 KB  conda-forge\n","    libgfortran-ng-13.2.0      |      h69a702a_13          47 KB  conda-forge\n","    libgfortran5-13.2.0        |      h3d2ce59_13         1.4 MB  conda-forge\n","    liblapack-3.9.0            |23_linux64_openblas          14 KB  conda-forge\n","    libopenblas-0.3.27         |pthreads_hac2b453_1         5.3 MB  conda-forge\n","    libta-lib-0.4.0            |       hd590300_2         310 KB  conda-forge\n","    numpy-1.26.4               |  py310hb13e2d6_0         6.7 MB  conda-forge\n","    openssl-3.3.1              |       h4bc722e_2         2.8 MB  conda-forge\n","    ta-lib-0.4.32              |  py310h8a78493_0         353 KB  conda-forge\n","    ------------------------------------------------------------\n","                                           Total:        17.2 MB\n","\n","The following NEW packages will be INSTALLED:\n","\n","  libblas            conda-forge/linux-64::libblas-3.9.0-23_linux64_openblas \n","  libcblas           conda-forge/linux-64::libcblas-3.9.0-23_linux64_openblas \n","  libgfortran-ng     conda-forge/linux-64::libgfortran-ng-13.2.0-h69a702a_13 \n","  libgfortran5       conda-forge/linux-64::libgfortran5-13.2.0-h3d2ce59_13 \n","  liblapack          conda-forge/linux-64::liblapack-3.9.0-23_linux64_openblas \n","  libopenblas        conda-forge/linux-64::libopenblas-0.3.27-pthreads_hac2b453_1 \n","  libta-lib          conda-forge/linux-64::libta-lib-0.4.0-hd590300_2 \n","  numpy              conda-forge/linux-64::numpy-1.26.4-py310hb13e2d6_0 \n","  ta-lib             conda-forge/linux-64::ta-lib-0.4.32-py310h8a78493_0 \n","\n","The following packages will be UPDATED:\n","\n","  ca-certificates                     2023.11.17-hbcca054_0 --> 2024.7.4-hbcca054_0 \n","  certifi                           2023.11.17-pyhd8ed1ab_0 --> 2024.7.4-pyhd8ed1ab_0 \n","  openssl                                  3.2.0-hd590300_1 --> 3.3.1-h4bc722e_2 \n","\n","\n","\n","Downloading and Extracting Packages:\n","numpy-1.26.4         | 6.7 MB    | :   0% 0/1 [00:00<?, ?it/s]\n","libopenblas-0.3.27   | 5.3 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\n","\n","openssl-3.3.1        | 2.8 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\n","\n","\n","libgfortran5-13.2.0  | 1.4 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","ta-lib-0.4.32        | 353 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","libta-lib-0.4.0      | 310 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","certifi-2024.7.4     | 156 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","ca-certificates-2024 | 151 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","libgfortran-ng-13.2. | 47 KB     | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","\n","libblas-3.9.0        | 15 KB     | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","liblapack-3.9.0      | 14 KB     | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","libcblas-3.9.0       | 14 KB     | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","numpy-1.26.4         | 6.7 MB    | :   0% 0.002337542641177788/1 [00:00<01:09, 69.66s/it]\n","\n","\n","libgfortran5-13.2.0  | 1.4 MB    | :   1% 0.011226654533693668/1 [00:00<00:14, 14.59s/it]\u001b[A\u001b[A\u001b[A\n","\n","openssl-3.3.1        | 2.8 MB    | :   1% 0.005658996419261726/1 [00:00<00:29, 29.88s/it]\u001b[A\u001b[A\n","\n","\n","\n","ta-lib-0.4.32        | 353 KB    | :   5% 0.04533606353247185/1 [00:00<00:03,  3.71s/it]\u001b[A\u001b[A\u001b[A\u001b[A\n","numpy-1.26.4         | 6.7 MB    | :  23% 0.23375426411777883/1 [00:00<00:00,  1.08it/s] \n","\n","\n","libgfortran5-13.2.0  | 1.4 MB    | :  91% 0.9093590172291871/1 [00:00<00:00,  4.20it/s]  \u001b[A\u001b[A\u001b[A\n","\n","openssl-3.3.1        | 2.8 MB    | :  50% 0.5036506813142936/1 [00:00<00:00,  2.29it/s]  \u001b[A\u001b[A\n","\n","\n","\n","\n","libta-lib-0.4.0      | 310 KB    | :   5% 0.05156449653488094/1 [00:00<00:05,  5.38s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","numpy-1.26.4         | 6.7 MB    | :  59% 0.5890607455768027/1 [00:00<00:00,  2.07it/s] \n","\n","\n","\n","\n","\n","\n","ca-certificates-2024 | 151 KB    | :  11% 0.10580356854565297/1 [00:00<00:03,  3.38s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","certifi-2024.7.4     | 156 KB    | :  10% 0.10284480377633264/1 [00:00<00:03,  3.53s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","ta-lib-0.4.32        | 353 KB    | : 100% 1.0/1 [00:00<00:00,  2.79it/s]                \u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","ta-lib-0.4.32        | 353 KB    | : 100% 1.0/1 [00:00<00:00,  2.79it/s]\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","\n","libblas-3.9.0        | 15 KB     | : 100% 1.0/1 [00:00<00:00,  2.39it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","libgfortran-ng-13.2. | 47 KB     | :  34% 0.3383795617422912/1 [00:00<00:00,  1.26s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","libta-lib-0.4.0      | 310 KB    | : 100% 1.0/1 [00:00<00:00,  2.59it/s]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","liblapack-3.9.0      | 14 KB     | : 100% 1.0/1 [00:00<00:00,  2.15it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","libcblas-3.9.0       | 14 KB     | : 100% 1.0/1 [00:00<00:00,  2.15it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","libta-lib-0.4.0      | 310 KB    | : 100% 1.0/1 [00:00<00:00,  2.59it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","certifi-2024.7.4     | 156 KB    | : 100% 1.0/1 [00:00<00:00,  2.36it/s]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","certifi-2024.7.4     | 156 KB    | : 100% 1.0/1 [00:00<00:00,  2.36it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","ca-certificates-2024 | 151 KB    | : 100% 1.0/1 [00:00<00:00,  2.13it/s]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","ca-certificates-2024 | 151 KB    | : 100% 1.0/1 [00:00<00:00,  2.13it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","libgfortran5-13.2.0  | 1.4 MB    | : 100% 1.0/1 [00:00<00:00,  4.20it/s]               \u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","\n","libblas-3.9.0        | 15 KB     | : 100% 1.0/1 [00:00<00:00,  2.39it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","libgfortran-ng-13.2. | 47 KB     | : 100% 1.0/1 [00:00<00:00,  1.57it/s]               \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","libgfortran-ng-13.2. | 47 KB     | : 100% 1.0/1 [00:00<00:00,  1.57it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","liblapack-3.9.0      | 14 KB     | : 100% 1.0/1 [00:00<00:00,  2.15it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","libcblas-3.9.0       | 14 KB     | : 100% 1.0/1 [00:00<00:00,  2.15it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","openssl-3.3.1        | 2.8 MB    | : 100% 1.0/1 [00:00<00:00,  1.08it/s]               \u001b[A\u001b[A\n","\n","openssl-3.3.1        | 2.8 MB    | : 100% 1.0/1 [00:00<00:00,  1.08it/s]\u001b[A\u001b[A\n","libopenblas-0.3.27   | 5.3 MB    | : 100% 1.0/1 [00:01<00:00,  1.36s/it]               \u001b[A\n","                                                                        \n","                                                                        \u001b[A\n","\n","                                                                        \u001b[A\u001b[A\n","\n","\n","                                                                        \u001b[A\u001b[A\u001b[A\n","\n","\n","\n","                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","\n","                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n","Preparing transaction: / \b\bdone\n","Verifying transaction: \\ \b\b| \b\b/ \b\bdone\n","Executing transaction: \\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\bdone\n","Collecting vectorbt\n","  Using cached vectorbt-0.26.2-py3-none-any.whl\n","Requirement already satisfied: numpy<2.0.0,>=1.16.5 in /usr/local/lib/python3.10/site-packages (from vectorbt) (1.26.4)\n","Collecting pandas (from vectorbt)\n","  Downloading pandas-2.2.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (19 kB)\n","Collecting scipy (from vectorbt)\n","  Downloading scipy-1.14.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.8/60.8 kB\u001b[0m \u001b[31m976.4 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting matplotlib (from vectorbt)\n","  Downloading matplotlib-3.9.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\n","Collecting plotly>=4.12.0 (from vectorbt)\n","  Downloading plotly-5.23.0-py3-none-any.whl.metadata (7.3 kB)\n","Collecting ipywidgets>=7.0.0 (from vectorbt)\n","  Downloading ipywidgets-8.1.3-py3-none-any.whl.metadata (2.4 kB)\n","Collecting dill (from vectorbt)\n","  Using cached dill-0.3.8-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/site-packages (from vectorbt) (4.66.1)\n","Collecting dateparser (from vectorbt)\n","  Using cached dateparser-1.2.0-py2.py3-none-any.whl.metadata (28 kB)\n","Collecting imageio (from vectorbt)\n","  Downloading imageio-2.35.1-py3-none-any.whl.metadata (4.9 kB)\n","Collecting scikit-learn (from vectorbt)\n","  Downloading scikit_learn-1.5.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\n","Collecting schedule (from vectorbt)\n","  Using cached schedule-1.2.2-py3-none-any.whl.metadata (3.8 kB)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/site-packages (from vectorbt) (2.31.0)\n","Collecting pytz (from vectorbt)\n","  Using cached pytz-2024.1-py2.py3-none-any.whl.metadata (22 kB)\n","Collecting mypy-extensions (from vectorbt)\n","  Using cached mypy_extensions-1.0.0-py3-none-any.whl.metadata (1.1 kB)\n","Collecting numba<0.57.0,>=0.56.0 (from vectorbt)\n","  Using cached numba-0.56.4-cp310-cp310-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (2.8 kB)\n","Collecting comm>=0.1.3 (from ipywidgets>=7.0.0->vectorbt)\n","  Downloading comm-0.2.2-py3-none-any.whl.metadata (3.7 kB)\n","Collecting ipython>=6.1.0 (from ipywidgets>=7.0.0->vectorbt)\n","  Downloading ipython-8.26.0-py3-none-any.whl.metadata (5.0 kB)\n","Collecting traitlets>=4.3.1 (from ipywidgets>=7.0.0->vectorbt)\n","  Downloading traitlets-5.14.3-py3-none-any.whl.metadata (10 kB)\n","Collecting widgetsnbextension~=4.0.11 (from ipywidgets>=7.0.0->vectorbt)\n","  Downloading widgetsnbextension-4.0.11-py3-none-any.whl.metadata (1.6 kB)\n","Collecting jupyterlab-widgets~=3.0.11 (from ipywidgets>=7.0.0->vectorbt)\n","  Using cached jupyterlab_widgets-3.0.11-py3-none-any.whl.metadata (4.1 kB)\n","Collecting llvmlite<0.40,>=0.39.0dev0 (from numba<0.57.0,>=0.56.0->vectorbt)\n","  Using cached llvmlite-0.39.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.7 kB)\n","Collecting numpy<2.0.0,>=1.16.5 (from vectorbt)\n","  Using cached numpy-1.23.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.3 kB)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/site-packages (from numba<0.57.0,>=0.56.0->vectorbt) (68.2.2)\n","Collecting tenacity>=6.2.0 (from plotly>=4.12.0->vectorbt)\n","  Using cached tenacity-9.0.0-py3-none-any.whl.metadata (1.2 kB)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/site-packages (from plotly>=4.12.0->vectorbt) (23.2)\n","Collecting python-dateutil (from dateparser->vectorbt)\n","  Downloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl.metadata (8.4 kB)\n","Collecting regex!=2019.02.19,!=2021.8.27 (from dateparser->vectorbt)\n","  Downloading regex-2024.7.24-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (40 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m40.5/40.5 kB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting tzlocal (from dateparser->vectorbt)\n","  Using cached tzlocal-5.2-py3-none-any.whl.metadata (7.8 kB)\n","Collecting pillow>=8.3.2 (from imageio->vectorbt)\n","  Downloading pillow-10.4.0-cp310-cp310-manylinux_2_28_x86_64.whl.metadata (9.2 kB)\n","Collecting contourpy>=1.0.1 (from matplotlib->vectorbt)\n","  Using cached contourpy-1.2.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.8 kB)\n","Collecting cycler>=0.10 (from matplotlib->vectorbt)\n","  Using cached cycler-0.12.1-py3-none-any.whl.metadata (3.8 kB)\n","Collecting fonttools>=4.22.0 (from matplotlib->vectorbt)\n","  Using cached fonttools-4.53.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (162 kB)\n","Collecting kiwisolver>=1.3.1 (from matplotlib->vectorbt)\n","  Using cached kiwisolver-1.4.5-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl.metadata (6.4 kB)\n","Collecting pyparsing>=2.3.1 (from matplotlib->vectorbt)\n","  Using cached pyparsing-3.1.2-py3-none-any.whl.metadata (5.1 kB)\n","Collecting tzdata>=2022.7 (from pandas->vectorbt)\n","  Using cached tzdata-2024.1-py2.py3-none-any.whl.metadata (1.4 kB)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/site-packages (from requests->vectorbt) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/site-packages (from requests->vectorbt) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/site-packages (from requests->vectorbt) (2.1.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/site-packages (from requests->vectorbt) (2024.7.4)\n","Collecting joblib>=1.2.0 (from scikit-learn->vectorbt)\n","  Using cached joblib-1.4.2-py3-none-any.whl.metadata (5.4 kB)\n","Collecting threadpoolctl>=3.1.0 (from scikit-learn->vectorbt)\n","  Using cached threadpoolctl-3.5.0-py3-none-any.whl.metadata (13 kB)\n","Collecting decorator (from ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Downloading decorator-5.1.1-py3-none-any.whl.metadata (4.0 kB)\n","Collecting jedi>=0.16 (from ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Using cached jedi-0.19.1-py2.py3-none-any.whl.metadata (22 kB)\n","Collecting matplotlib-inline (from ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Using cached matplotlib_inline-0.1.7-py3-none-any.whl.metadata (3.9 kB)\n","Collecting prompt-toolkit<3.1.0,>=3.0.41 (from ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Using cached prompt_toolkit-3.0.47-py3-none-any.whl.metadata (6.4 kB)\n","Collecting pygments>=2.4.0 (from ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Downloading pygments-2.18.0-py3-none-any.whl.metadata (2.5 kB)\n","Collecting stack-data (from ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Downloading stack_data-0.6.3-py3-none-any.whl.metadata (18 kB)\n","Collecting exceptiongroup (from ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Using cached exceptiongroup-1.2.2-py3-none-any.whl.metadata (6.6 kB)\n","Collecting typing-extensions>=4.6 (from ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Using cached typing_extensions-4.12.2-py3-none-any.whl.metadata (3.0 kB)\n","Collecting pexpect>4.3 (from ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Using cached pexpect-4.9.0-py2.py3-none-any.whl.metadata (2.5 kB)\n","Collecting six>=1.5 (from python-dateutil->dateparser->vectorbt)\n","  Using cached six-1.16.0-py2.py3-none-any.whl.metadata (1.8 kB)\n","Collecting parso<0.9.0,>=0.8.3 (from jedi>=0.16->ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Using cached parso-0.8.4-py2.py3-none-any.whl.metadata (7.7 kB)\n","Collecting ptyprocess>=0.5 (from pexpect>4.3->ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Using cached ptyprocess-0.7.0-py2.py3-none-any.whl.metadata (1.3 kB)\n","Collecting wcwidth (from prompt-toolkit<3.1.0,>=3.0.41->ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Using cached wcwidth-0.2.13-py2.py3-none-any.whl.metadata (14 kB)\n","Collecting executing>=1.2.0 (from stack-data->ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Downloading executing-2.0.1-py2.py3-none-any.whl.metadata (9.0 kB)\n","Collecting asttokens>=2.1.0 (from stack-data->ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Downloading asttokens-2.4.1-py2.py3-none-any.whl.metadata (5.2 kB)\n","Collecting pure-eval (from stack-data->ipython>=6.1.0->ipywidgets>=7.0.0->vectorbt)\n","  Downloading pure_eval-0.2.3-py3-none-any.whl.metadata (6.3 kB)\n","Downloading ipywidgets-8.1.3-py3-none-any.whl (139 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m139.4/139.4 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached numba-0.56.4-cp310-cp310-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (3.5 MB)\n","Using cached numpy-1.23.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.1 MB)\n","Downloading plotly-5.23.0-py3-none-any.whl (17.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m17.3/17.3 MB\u001b[0m \u001b[31m48.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached dateparser-1.2.0-py2.py3-none-any.whl (294 kB)\n","Using cached dill-0.3.8-py3-none-any.whl (116 kB)\n","Downloading imageio-2.35.1-py3-none-any.whl (315 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m315.4/315.4 kB\u001b[0m \u001b[31m21.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading matplotlib-3.9.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (8.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.3/8.3 MB\u001b[0m \u001b[31m70.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n","Downloading pandas-2.2.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.0 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.0/13.0 MB\u001b[0m \u001b[31m36.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached pytz-2024.1-py2.py3-none-any.whl (505 kB)\n","Using cached schedule-1.2.2-py3-none-any.whl (12 kB)\n","Downloading scikit_learn-1.5.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.4 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.4/13.4 MB\u001b[0m \u001b[31m57.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading scipy-1.14.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.1/41.1 MB\u001b[0m \u001b[31m12.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading comm-0.2.2-py3-none-any.whl (7.2 kB)\n","Using cached contourpy-1.2.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (305 kB)\n","Using cached cycler-0.12.1-py3-none-any.whl (8.3 kB)\n","Using cached fonttools-4.53.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.6 MB)\n","Downloading ipython-8.26.0-py3-none-any.whl (817 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m817.9/817.9 kB\u001b[0m \u001b[31m40.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached joblib-1.4.2-py3-none-any.whl (301 kB)\n","Using cached jupyterlab_widgets-3.0.11-py3-none-any.whl (214 kB)\n","Using cached kiwisolver-1.4.5-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.6 MB)\n","Using cached llvmlite-0.39.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (34.6 MB)\n","Downloading pillow-10.4.0-cp310-cp310-manylinux_2_28_x86_64.whl (4.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.5/4.5 MB\u001b[0m \u001b[31m68.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached pyparsing-3.1.2-py3-none-any.whl (103 kB)\n","Downloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m229.9/229.9 kB\u001b[0m \u001b[31m16.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading regex-2024.7.24-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (776 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m776.5/776.5 kB\u001b[0m \u001b[31m36.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached tenacity-9.0.0-py3-none-any.whl (28 kB)\n","Using cached threadpoolctl-3.5.0-py3-none-any.whl (18 kB)\n","Downloading traitlets-5.14.3-py3-none-any.whl (85 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m85.4/85.4 kB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached tzdata-2024.1-py2.py3-none-any.whl (345 kB)\n","Downloading widgetsnbextension-4.0.11-py3-none-any.whl (2.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.3/2.3 MB\u001b[0m \u001b[31m63.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached tzlocal-5.2-py3-none-any.whl (17 kB)\n","Using cached jedi-0.19.1-py2.py3-none-any.whl (1.6 MB)\n","Using cached pexpect-4.9.0-py2.py3-none-any.whl (63 kB)\n","Using cached prompt_toolkit-3.0.47-py3-none-any.whl (386 kB)\n","Downloading pygments-2.18.0-py3-none-any.whl (1.2 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m47.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached six-1.16.0-py2.py3-none-any.whl (11 kB)\n","Using cached typing_extensions-4.12.2-py3-none-any.whl (37 kB)\n","Downloading decorator-5.1.1-py3-none-any.whl (9.1 kB)\n","Using cached exceptiongroup-1.2.2-py3-none-any.whl (16 kB)\n","Using cached matplotlib_inline-0.1.7-py3-none-any.whl (9.9 kB)\n","Downloading stack_data-0.6.3-py3-none-any.whl (24 kB)\n","Downloading asttokens-2.4.1-py2.py3-none-any.whl (27 kB)\n","Downloading executing-2.0.1-py2.py3-none-any.whl (24 kB)\n","Using cached parso-0.8.4-py2.py3-none-any.whl (103 kB)\n","Using cached ptyprocess-0.7.0-py2.py3-none-any.whl (13 kB)\n","Downloading pure_eval-0.2.3-py3-none-any.whl (11 kB)\n","Using cached wcwidth-0.2.13-py2.py3-none-any.whl (34 kB)\n","Installing collected packages: wcwidth, pytz, pure-eval, ptyprocess, widgetsnbextension, tzlocal, tzdata, typing-extensions, traitlets, threadpoolctl, tenacity, six, schedule, regex, pyparsing, pygments, prompt-toolkit, pillow, pexpect, parso, numpy, mypy-extensions, llvmlite, kiwisolver, jupyterlab-widgets, joblib, fonttools, executing, exceptiongroup, dill, decorator, cycler, scipy, python-dateutil, plotly, numba, matplotlib-inline, jedi, imageio, contourpy, comm, asttokens, stack-data, scikit-learn, pandas, matplotlib, dateparser, ipython, ipywidgets, vectorbt\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 1.26.4\n","    Uninstalling numpy-1.26.4:\n","      Successfully uninstalled numpy-1.26.4\n","Successfully installed asttokens-2.4.1 comm-0.2.2 contourpy-1.2.1 cycler-0.12.1 dateparser-1.2.0 decorator-5.1.1 dill-0.3.8 exceptiongroup-1.2.2 executing-2.0.1 fonttools-4.53.1 imageio-2.35.1 ipython-8.26.0 ipywidgets-8.1.3 jedi-0.19.1 joblib-1.4.2 jupyterlab-widgets-3.0.11 kiwisolver-1.4.5 llvmlite-0.39.1 matplotlib-3.9.2 matplotlib-inline-0.1.7 mypy-extensions-1.0.0 numba-0.56.4 numpy-1.23.5 pandas-2.2.2 parso-0.8.4 pexpect-4.9.0 pillow-10.4.0 plotly-5.23.0 prompt-toolkit-3.0.47 ptyprocess-0.7.0 pure-eval-0.2.3 pygments-2.18.0 pyparsing-3.1.2 python-dateutil-2.9.0.post0 pytz-2024.1 regex-2024.7.24 schedule-1.2.2 scikit-learn-1.5.1 scipy-1.14.0 six-1.16.0 stack-data-0.6.3 tenacity-9.0.0 threadpoolctl-3.5.0 traitlets-5.14.3 typing-extensions-4.12.2 tzdata-2024.1 tzlocal-5.2 vectorbt-0.26.2 wcwidth-0.2.13 widgetsnbextension-4.0.11\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["cycler","kiwisolver","matplotlib_inline","numpy","pexpect","prompt_toolkit","six","wcwidth"]},"id":"f47e083ddbc64897a16c41288c92ac4e"}},"metadata":{}}],"source":["!pip install vectorbt\n","!pip install condacolab\n","import condacolab\n","condacolab.install()\n","!conda install -c conda-forge ta-lib\n","!pip install vectorbt"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"ipYwI2uERxbM","executionInfo":{"status":"ok","timestamp":1724127186185,"user_tz":-300,"elapsed":419,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"}}},"outputs":[],"source":["import vectorbt as vbt\n","import talib as ta\n","import requests\n","import json\n","import math\n","import pandas_datareader as web\n","import numpy as np\n","import pandas as pd\n","import time\n","import datetime\n","\n"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"uuRMXVEZR2hO","executionInfo":{"status":"ok","timestamp":1724127194197,"user_tz":-300,"elapsed":467,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"}}},"outputs":[],"source":["class GetBinanceData:\n","    @staticmethod\n","    def get_data(symbol, interval, startDate=datetime.datetime(2020, 1, 1), endDate=datetime.datetime.now()):\n","        dataList = []\n","        current_date = datetime.datetime.now()\n","        start_date = startDate\n","\n","        delta_units = GetBinanceData.convert_to_minutes(interval)\n","        print(delta_units)\n","        delta = datetime.timedelta(minutes=delta_units)\n","\n","        while start_date < current_date:\n","            end_date = start_date + delta\n","            if end_date > current_date:\n","                end_date = current_date\n","            # Convert datetime objects to milliseconds\n","            start_ms = int(start_date.timestamp() * 1000)\n","            end_ms = int(end_date.timestamp() * 1000)\n","\n","            start_str = start_date.strftime('%Y-%m-%d %H:%M:%S')\n","            end_str = end_date.strftime('%Y-%m-%d %H:%M:%S')\n","\n","            print(f\"Fetching data from {start_str} to {end_str}\")\n","            data = GetBinanceData.get_historical_data(symbol, interval, start_ms, end_ms)\n","            if data:\n","                dataList.extend(data)\n","            start_date = end_date\n","            time.sleep(1)\n","\n","        return dataList\n","\n","    @staticmethod\n","    def get_historical_data(symbol, interval, start_time, end_time):\n","        url = f\"https://api.binance.us/api/v3/klines\"\n","        params = {\n","            'symbol': symbol.upper(),\n","            'interval': interval,\n","            'startTime': start_time,\n","            'endTime': end_time,\n","            'limit': 1000\n","        }\n","        print(params)\n","        response = requests.get(url, params=params)\n","        if response.status_code == 200:\n","            data = response.json()\n","            return data\n","        else:\n","\n","            print(f\"Failed to fetch data. Status code: {response.json()}\")\n","            return None\n","\n","    @staticmethod\n","    def convert_to_minutes(time_str):\n","        time_mapping = {\n","            'm': 1,\n","            'h': 60,\n","            'd': 1440,\n","            'w': 10080,\n","            'M': 43200\n","        }\n","\n","        num = int(time_str[:-1])\n","        unit = time_str[-1]\n","\n","        return (num * time_mapping[unit])*1000\n","\n","    def data_to_dataframe(data):\n","      # Define the column names based on Binance API response\n","      columns = [\n","          \"timestamp\", \"open\", \"high\", \"low\", \"close\", \"volume\",\n","          \"Close Time\", \"Quote Asset Volume\", \"Number of Trades\",\n","          \"Taker Buy Base Asset Volume\", \"Taker Buy Quote Asset Volume\", \"Ignore\"\n","      ]\n","      # Convert the data to a pandas DataFrame\n","      df = pd.DataFrame(data, columns=columns)\n","      # Convert timestamp columns to datetime\n","      df[\"timestamp\"] = pd.to_datetime(df['timestamp'])\n","      df[\"Close Time\"] = pd.to_datetime(df[\"Close Time\"], unit='ms')\n","      # Convert numeric columns to float\n","      numeric_columns = [\"open\", \"high\", \"low\", \"close\", \"volume\", \"Quote Asset Volume\",\n","                        \"Taker Buy Base Asset Volume\", \"Taker Buy Quote Asset Volume\"]\n","      df[numeric_columns] = df[numeric_columns].astype(float)\n","      return df\n","\n","    @staticmethod\n","    def get_data_dataFrame(symbol, interval, startDate=datetime.datetime(2020, 1, 1), endDate=datetime.datetime.now()):\n","        data = GetBinanceData.get_data(symbol, interval, startDate, endDate)\n","        return GetBinanceData.data_to_dataframe(data)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4K7znYNER5UL"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":29871,"status":"ok","timestamp":1724127246363,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"},"user_tz":-300},"id":"Ua8NUnzqR9LU","outputId":"3d526ed2-b96d-4805-f757-aad8e468e840"},"outputs":[{"output_type":"stream","name":"stdout","text":["60000\n","Fetching data from 2022-02-01 00:00:00 to 2022-03-14 16:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1643673600000, 'endTime': 1647273600000, 'limit': 1000}\n","Fetching data from 2022-03-14 16:00:00 to 2022-04-25 08:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1647273600000, 'endTime': 1650873600000, 'limit': 1000}\n","Fetching data from 2022-04-25 08:00:00 to 2022-06-06 00:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1650873600000, 'endTime': 1654473600000, 'limit': 1000}\n","Fetching data from 2022-06-06 00:00:00 to 2022-07-17 16:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1654473600000, 'endTime': 1658073600000, 'limit': 1000}\n","Fetching data from 2022-07-17 16:00:00 to 2022-08-28 08:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1658073600000, 'endTime': 1661673600000, 'limit': 1000}\n","Fetching data from 2022-08-28 08:00:00 to 2022-10-09 00:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1661673600000, 'endTime': 1665273600000, 'limit': 1000}\n","Fetching data from 2022-10-09 00:00:00 to 2022-11-19 16:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1665273600000, 'endTime': 1668873600000, 'limit': 1000}\n","Fetching data from 2022-11-19 16:00:00 to 2022-12-31 08:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1668873600000, 'endTime': 1672473600000, 'limit': 1000}\n","Fetching data from 2022-12-31 08:00:00 to 2023-02-11 00:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1672473600000, 'endTime': 1676073600000, 'limit': 1000}\n","Fetching data from 2023-02-11 00:00:00 to 2023-03-24 16:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1676073600000, 'endTime': 1679673600000, 'limit': 1000}\n","Fetching data from 2023-03-24 16:00:00 to 2023-05-05 08:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1679673600000, 'endTime': 1683273600000, 'limit': 1000}\n","Fetching data from 2023-05-05 08:00:00 to 2023-06-16 00:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1683273600000, 'endTime': 1686873600000, 'limit': 1000}\n","Fetching data from 2023-06-16 00:00:00 to 2023-07-27 16:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1686873600000, 'endTime': 1690473600000, 'limit': 1000}\n","Fetching data from 2023-07-27 16:00:00 to 2023-09-07 08:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1690473600000, 'endTime': 1694073600000, 'limit': 1000}\n","Fetching data from 2023-09-07 08:00:00 to 2023-10-19 00:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1694073600000, 'endTime': 1697673600000, 'limit': 1000}\n","Fetching data from 2023-10-19 00:00:00 to 2023-11-29 16:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1697673600000, 'endTime': 1701273600000, 'limit': 1000}\n","Fetching data from 2023-11-29 16:00:00 to 2024-01-10 08:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1701273600000, 'endTime': 1704873600000, 'limit': 1000}\n","Fetching data from 2024-01-10 08:00:00 to 2024-02-21 00:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1704873600000, 'endTime': 1708473600000, 'limit': 1000}\n","Fetching data from 2024-02-21 00:00:00 to 2024-04-02 16:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1708473600000, 'endTime': 1712073600000, 'limit': 1000}\n","Fetching data from 2024-04-02 16:00:00 to 2024-05-14 08:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1712073600000, 'endTime': 1715673600000, 'limit': 1000}\n","Fetching data from 2024-05-14 08:00:00 to 2024-06-25 00:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1715673600000, 'endTime': 1719273600000, 'limit': 1000}\n","Fetching data from 2024-06-25 00:00:00 to 2024-08-05 16:00:00\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1719273600000, 'endTime': 1722873600000, 'limit': 1000}\n","Fetching data from 2024-08-05 16:00:00 to 2024-08-20 04:13:36\n","{'symbol': 'BTCUSDT', 'interval': '1h', 'startTime': 1722873600000, 'endTime': 1724127216089, 'limit': 1000}\n"]}],"source":["timeperiod = '1h'\n","\n","symbol = \"btcusdt\"\n","data = GetBinanceData.get_data(symbol, timeperiod, startDate=datetime.datetime(2022, 2, 1), endDate=datetime.datetime.now())\n"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":345},"collapsed":true,"executionInfo":{"elapsed":444,"status":"ok","timestamp":1724127464914,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"},"user_tz":-300},"id":"2PzGcAhHSEwS","outputId":"fbb79fe1-d14b-479c-fdea-bc75f6abd093"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                   timestamp      open      high       low     close  \\\n","0 1970-01-01 00:27:23.673600  38471.00  38610.43  38257.32  38311.22   \n","1 1970-01-01 00:27:23.677200  38348.11  38407.03  38176.03  38262.31   \n","2 1970-01-01 00:27:23.680800  38234.81  38499.80  38227.22  38448.37   \n","3 1970-01-01 00:27:23.684400  38482.38  38653.23  38406.21  38609.17   \n","4 1970-01-01 00:27:23.688000  38594.49  38620.42  38487.27  38548.02   \n","\n","     volume              Close Time  Quote Asset Volume  Number of Trades  \\\n","0  3.590703 2022-02-01 00:59:59.999       137770.043682               188   \n","1  3.105909 2022-02-01 01:59:59.999       118966.256286               140   \n","2  3.286101 2022-02-01 02:59:59.999       126101.819696               171   \n","3  4.565492 2022-02-01 03:59:59.999       176076.896846               249   \n","4  3.034781 2022-02-01 04:59:59.999       116991.067596               144   \n","\n","   Taker Buy Base Asset Volume  Taker Buy Quote Asset Volume Ignore  \n","0                     0.988204                  37967.207852      0  \n","1                     1.178847                  45155.379897      0  \n","2                     2.265915                  86965.587789      0  \n","3                     2.134136                  82312.905820      0  \n","4                     1.484121                  57221.035106      0  "],"text/html":["\n","  <div id=\"df-25cafff0-6751-4fbb-a089-4e1d5f71e604\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>timestamp</th>\n","      <th>open</th>\n","      <th>high</th>\n","      <th>low</th>\n","      <th>close</th>\n","      <th>volume</th>\n","      <th>Close Time</th>\n","      <th>Quote Asset Volume</th>\n","      <th>Number of Trades</th>\n","      <th>Taker Buy Base Asset Volume</th>\n","      <th>Taker Buy Quote Asset Volume</th>\n","      <th>Ignore</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1970-01-01 00:27:23.673600</td>\n","      <td>38471.00</td>\n","      <td>38610.43</td>\n","      <td>38257.32</td>\n","      <td>38311.22</td>\n","      <td>3.590703</td>\n","      <td>2022-02-01 00:59:59.999</td>\n","      <td>137770.043682</td>\n","      <td>188</td>\n","      <td>0.988204</td>\n","      <td>37967.207852</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1970-01-01 00:27:23.677200</td>\n","      <td>38348.11</td>\n","      <td>38407.03</td>\n","      <td>38176.03</td>\n","      <td>38262.31</td>\n","      <td>3.105909</td>\n","      <td>2022-02-01 01:59:59.999</td>\n","      <td>118966.256286</td>\n","      <td>140</td>\n","      <td>1.178847</td>\n","      <td>45155.379897</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1970-01-01 00:27:23.680800</td>\n","      <td>38234.81</td>\n","      <td>38499.80</td>\n","      <td>38227.22</td>\n","      <td>38448.37</td>\n","      <td>3.286101</td>\n","      <td>2022-02-01 02:59:59.999</td>\n","      <td>126101.819696</td>\n","      <td>171</td>\n","      <td>2.265915</td>\n","      <td>86965.587789</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1970-01-01 00:27:23.684400</td>\n","      <td>38482.38</td>\n","      <td>38653.23</td>\n","      <td>38406.21</td>\n","      <td>38609.17</td>\n","      <td>4.565492</td>\n","      <td>2022-02-01 03:59:59.999</td>\n","      <td>176076.896846</td>\n","      <td>249</td>\n","      <td>2.134136</td>\n","      <td>82312.905820</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1970-01-01 00:27:23.688000</td>\n","      <td>38594.49</td>\n","      <td>38620.42</td>\n","      <td>38487.27</td>\n","      <td>38548.02</td>\n","      <td>3.034781</td>\n","      <td>2022-02-01 04:59:59.999</td>\n","      <td>116991.067596</td>\n","      <td>144</td>\n","      <td>1.484121</td>\n","      <td>57221.035106</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-25cafff0-6751-4fbb-a089-4e1d5f71e604')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-25cafff0-6751-4fbb-a089-4e1d5f71e604 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-25cafff0-6751-4fbb-a089-4e1d5f71e604');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-187920bc-68a0-4b35-a044-b19aa65cb1bb\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-187920bc-68a0-4b35-a044-b19aa65cb1bb')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-187920bc-68a0-4b35-a044-b19aa65cb1bb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dataframe","summary":"{\n  \"name\": \"dataframe\",\n  \"rows\": 22343,\n  \"fields\": [\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:27:23.673600\",\n        \"max\": \"1970-01-01 00:28:44.126400\",\n        \"num_unique_values\": 22342,\n        \"samples\": [\n          \"1970-01-01 00:28:41.415600\",\n          \"1970-01-01 00:27:49.636800\",\n          \"1970-01-01 00:28:27.379200\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16172.361445868119,\n        \"min\": 15653.63,\n        \"max\": 73485.35,\n        \"num_unique_values\": 22014,\n        \"samples\": [\n          19801.29,\n          23412.56,\n          61470.31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"high\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16243.159548835845,\n        \"min\": 15769.13,\n        \"max\": 138070.0,\n        \"num_unique_values\": 21213,\n        \"samples\": [\n          44979.05,\n          27643.64,\n          42151.85\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16109.964835431114,\n        \"min\": 15486.74,\n        \"max\": 73190.06,\n        \"num_unique_values\": 21253,\n        \"samples\": [\n          21238.61,\n          30758.41,\n          21610.17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16173.100440237877,\n        \"min\": 15650.78,\n        \"max\": 73487.75,\n        \"num_unique_values\": 21999,\n        \"samples\": [\n          69139.4,\n          39488.56,\n          64049.56\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 77.61302531540352,\n        \"min\": 0.00629,\n        \"max\": 2004.507026,\n        \"num_unique_values\": 22266,\n        \"samples\": [\n          4.358778,\n          59.234442,\n          214.34963\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close Time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2022-02-01 00:59:59.999000\",\n        \"max\": \"2024-08-20 04:59:59.999000\",\n        \"num_unique_values\": 22342,\n        \"samples\": [\n          \"2024-07-19 19:59:59.999000\",\n          \"2022-11-28 12:59:59.999000\",\n          \"2024-02-08 08:59:59.999000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quote Asset Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1666826.0732398508,\n        \"min\": 404.8390107,\n        \"max\": 39649166.29171157,\n        \"num_unique_values\": 22342,\n        \"samples\": [\n          257880.8964658,\n          748315.83436307,\n          82571.6992173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of Trades\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1129,\n        \"min\": 21,\n        \"max\": 19377,\n        \"num_unique_values\": 3497,\n        \"samples\": [\n          3038,\n          833,\n          4168\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Taker Buy Base Asset Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.5649136403896,\n        \"min\": 0.00042,\n        \"max\": 973.755194,\n        \"num_unique_values\": 22201,\n        \"samples\": [\n          2.63421,\n          0.343061,\n          1.039264\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Taker Buy Quote Asset Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 831395.1883958041,\n        \"min\": 24.8461618,\n        \"max\": 20059325.72708881,\n        \"num_unique_values\": 22342,\n        \"samples\": [\n          201151.0030705,\n          339209.12682147,\n          63327.1750294\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ignore\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}],"source":["dataframe = GetBinanceData.data_to_dataframe(data)\n","dataframe = dataframe.dropna()\n","\n","dataframe.head()\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":681,"status":"ok","timestamp":1719188611049,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"},"user_tz":-300},"id":"GzgqK5Y1jtRC","outputId":"6e643c96-46bf-4fcf-ce58-95dc73625a62"},"outputs":[{"name":"stdout","output_type":"stream","text":["                   timestamp     open     high      low    close    volume  \\\n","0 1970-01-01 00:27:07.776000  36.8003  36.8130  35.6575  36.1063  23503.61   \n","1 1970-01-01 00:27:07.779600  36.1161  36.1469  35.3900  35.6450  13563.89   \n","2 1970-01-01 00:27:07.783200  35.6791  35.7404  35.3021  35.6365   7008.81   \n","3 1970-01-01 00:27:07.786800  35.6597  36.2757  35.5547  36.1108   5108.25   \n","4 1970-01-01 00:27:07.790400  36.0689  36.1524  35.5227  35.5227   2479.35   \n","\n","               Close Time  Quote Asset Volume  Number of Trades  \\\n","0 2021-08-01 00:59:59.999       845859.011743              1064   \n","1 2021-08-01 01:59:59.999       483881.302693               430   \n","2 2021-08-01 02:59:59.999       248254.949724               232   \n","3 2021-08-01 03:59:59.999       183569.930400               307   \n","4 2021-08-01 04:59:59.999        88716.873535               152   \n","\n","   Taker Buy Base Asset Volume  Taker Buy Quote Asset Volume Ignore  \\\n","0                     12126.08                 436274.671111      0   \n","1                      2843.24                 101291.422500      0   \n","2                      1634.14                  57889.433052      0   \n","3                      1909.98                  68650.753902      0   \n","4                       949.13                  33936.816941      0   \n","\n","    ha_close   ha_open   ha_high   ha_low  \n","0  36.344275  36.80030  36.81300  35.6575  \n","1  35.824500  36.45330  36.45330  35.3900  \n","2  35.589525  35.88055  35.88055  35.3021  \n","3  35.900225  35.65780  36.27570  35.5547  \n","4  35.816675  35.88525  36.15240  35.5227  \n"]},{"name":"stderr","output_type":"stream","text":["<ipython-input-14-5b9df8d39735>:3: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe['ha_open'].iloc[0] = dataframe['open'].iloc[0]  # The first open value is just the original open value\n","<ipython-input-14-5b9df8d39735>:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe['ha_open'].iloc[0] = dataframe['open'].iloc[0]  # The first open value is just the original open value\n"]}],"source":["dataframe['ha_close'] = (dataframe[['open', 'high', 'low', 'close']].sum(axis=1)) / 4\n","dataframe['ha_open'] = (dataframe['open'].shift(1) + dataframe['close'].shift(1)) / 2\n","dataframe['ha_open'].iloc[0] = dataframe['open'].iloc[0]  # The first open value is just the original open value\n","\n","dataframe['ha_high'] = dataframe[['high', 'ha_open', 'ha_close']].max(axis=1)\n","dataframe['ha_low'] = dataframe[['low', 'ha_open', 'ha_close']].min(axis=1)\n","\n","print(dataframe.head())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":344078,"status":"ok","timestamp":1719189046614,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"},"user_tz":-300},"id":"PYNxV70tlBgI","outputId":"599fcc15-6b3a-45ff-86bc-c3242ec986de"},"outputs":[{"name":"stderr","output_type":"stream","text":["\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:27: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = dataframe[f'basic_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:27: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = dataframe[f'basic_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:27: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = dataframe[f'basic_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:27: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = dataframe[f'basic_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:27: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = dataframe[f'basic_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:27: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = dataframe[f'basic_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:33: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:33: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:34: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = 1\n","<ipython-input-15-fb738f777ab7>:34: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = 1\n","<ipython-input-15-fb738f777ab7>:22: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = dataframe[f'basic_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:22: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = dataframe[f'basic_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:27: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = dataframe[f'basic_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:27: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = dataframe[f'basic_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:27: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = dataframe[f'basic_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:27: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = dataframe[f'basic_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:33: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:33: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_lb_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:34: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = 1\n","<ipython-input-15-fb738f777ab7>:34: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = 1\n","<ipython-input-15-fb738f777ab7>:22: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = dataframe[f'basic_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:22: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = dataframe[f'basic_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","<ipython-input-15-fb738f777ab7>:31: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'direction_{i}'][j] = -1\n","<ipython-input-15-fb738f777ab7>:20: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n","You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n","A typical example is when you are setting values in a column of a DataFrame, like:\n","\n","df[\"col\"][row_indexer] = value\n","\n","Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","<ipython-input-15-fb738f777ab7>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"]}],"source":["# Supertrend Parameters\n","atr_periods = [12, 10, 11]\n","factors = [3.0, 1.0, 2.0]\n","\n","for i in range(3):\n","    # Calculate ATR\n","    dataframe[f'ATR_{i}'] = ta.ATR(dataframe['ha_high'], dataframe['ha_low'], dataframe['ha_close'], timeperiod=atr_periods[i])\n","\n","    # Initialize Supertrend columns\n","    dataframe[f'basic_ub_{i}'] = (dataframe['ha_high'] + dataframe['ha_low']) / 2 + factors[i] * dataframe[f'ATR_{i}']\n","    dataframe[f'basic_lb_{i}'] = (dataframe['ha_high'] + dataframe['ha_low']) / 2 - factors[i] * dataframe[f'ATR_{i}']\n","    dataframe[f'final_ub_{i}'] = np.nan\n","    dataframe[f'final_lb_{i}'] = np.nan\n","    dataframe[f'supertrend_{i}'] = np.nan\n","    dataframe[f'direction_{i}'] = np.nan\n","\n","    # Calculate Supertrend\n","    for j in range(atr_periods[i], len(dataframe)):\n","        if dataframe['ha_close'][j-1] <= dataframe[f'final_ub_{i}'][j-1]:\n","            dataframe[f'final_ub_{i}'][j] = min(dataframe[f'basic_ub_{i}'][j], dataframe[f'final_ub_{i}'][j-1])\n","        else:\n","            dataframe[f'final_ub_{i}'][j] = dataframe[f'basic_ub_{i}'][j]\n","\n","        if dataframe['ha_close'][j-1] >= dataframe[f'final_lb_{i}'][j-1]:\n","            dataframe[f'final_lb_{i}'][j] = max(dataframe[f'basic_lb_{i}'][j], dataframe[f'final_lb_{i}'][j-1])\n","        else:\n","            dataframe[f'final_lb_{i}'][j] = dataframe[f'basic_lb_{i}'][j]\n","\n","        if dataframe['ha_close'][j] <= dataframe[f'final_ub_{i}'][j]:\n","            dataframe[f'supertrend_{i}'][j] = dataframe[f'final_ub_{i}'][j]\n","            dataframe[f'direction_{i}'][j] = -1\n","        else:\n","            dataframe[f'supertrend_{i}'][j] = dataframe[f'final_lb_{i}'][j]\n","            dataframe[f'direction_{i}'][j] = 1\n","\n","# Calculate RSI\n","dataframe['rsi'] = ta.RSI(dataframe['ha_high'], timeperiod=14)\n","\n","# Calculate EMAs\n","dataframe['ema_9'] = ta.EMA(dataframe['ha_high'], timeperiod=9)\n","dataframe['ema_200'] = ta.EMA(dataframe['ha_high'], timeperiod=200)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":543,"output_embedded_package_id":"1k1dD54n-tXmGrw1tRxkvBWe-NUsiZ2sB"},"id":"4z08XzuPog6G","outputId":"51dfb6b3-7632-427e-9c2e-4b93b379b0be"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["long = (\n","    (dataframe['direction_0'] == 1) &\n","    (dataframe['direction_1'] == 1) &\n","    (dataframe['direction_2'] == 1) &\n","    (dataframe['rsi'] > 70) &\n","    (dataframe['high'] > dataframe['ema_9'])\n",")\n","\n","short =  (dataframe['ema_200'] > dataframe['ema_9']) | (dataframe['ema_9'] > dataframe['high'])\n","pf = vbt.Portfolio.from_signals(\n","    close=dataframe['close'],\n","    entries=long,\n","    exits=short,\n","    init_cash=10000,\n","    freq='1h',\n","    sl_stop=0.01,  # Stoploss at -20%\n","\n","\n",")\n","\n","# Performance metrics\n","print(pf.stats())\n","\n","# Plot the results\n","pf.plot().show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"chE5mgQ4Z0CR"},"outputs":[],"source":["macd, macdsignal, macdhist = ta.MACD(dataframe[\"close\"])\n","dataframe['macd'] = macd\n","dataframe['macdsignal'] = macdsignal\n","dataframe['macdhist'] = macdhist\n","\n","# Calculate CCI\n","dataframe['cci'] = ta.CCI(dataframe[\"high\"], dataframe[\"low\"], dataframe[\"close\"])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FCtQS_Bya57y"},"outputs":[],"source":["# Define buy and sell signals\n","buy_signal = (\n","    (dataframe['macd'] > dataframe['macdsignal']) &\n","    (dataframe['cci'] <= -48) &\n","    (dataframe['volume'] > 0)\n",")\n","\n","sell_signal = (\n","    (dataframe['macd'] < dataframe['macdsignal']) &\n","    (dataframe['cci'] >= 687) &\n","    (dataframe['volume'] > 0)\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":543},"executionInfo":{"elapsed":40903,"status":"ok","timestamp":1718498342479,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"},"user_tz":-300},"id":"Yn7ZrE7ya0Kn","outputId":"42f8c8ab-d9f0-406a-871b-4ab7b4220434"},"outputs":[{"name":"stdout","output_type":"stream","text":["Start                                                 0\n","End                                              302311\n","Period                               1049 days 16:40:00\n","Start Value                                     10000.0\n","End Value                                  14683.357426\n","Total Return [%]                              46.833574\n","Benchmark Return [%]                          60.281069\n","Max Gross Exposure [%]                            100.0\n","Total Fees Paid                                     0.0\n","Max Drawdown [%]                              59.174617\n","Max Drawdown Duration                 867 days 10:35:00\n","Total Trades                                        505\n","Total Closed Trades                                 504\n","Total Open Trades                                     1\n","Open Trade PnL                             -1094.905944\n","Win Rate [%]                                  90.873016\n","Best Trade [%]                                 3.776005\n","Worst Trade [%]                              -17.953905\n","Avg Winning Trade [%]                          1.232536\n","Avg Losing Trade [%]                         -10.586815\n","Avg Winning Trade Duration    1 days 06:45:26.200873362\n","Avg Losing Trade Duration     5 days 23:35:39.130434782\n","Profit Factor                                  1.104772\n","Expectancy                                    11.464808\n","Sharpe Ratio                                   0.517957\n","Calmar Ratio                                    0.24149\n","Omega Ratio                                     1.00575\n","Sortino Ratio                                   0.72708\n","dtype: object\n"]}],"source":["\n","pf = vbt.Portfolio.from_signals(\n","    close=dataframe['close'],\n","    entries=buy_signal,\n","    exits=sell_signal,\n","    init_cash=10000,\n","    freq='5m',  # 5 minutes\n","    tp_stop=0.01,\n","    sl_stop=0.1,  # Stoploss at -20%\n","\n","\n",")\n","\n","# Performance metrics\n","print(pf.stats())\n","\n","# Plot the results\n","pf.plot().show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":454},"collapsed":true,"executionInfo":{"elapsed":4781,"status":"error","timestamp":1718424109440,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"},"user_tz":-300},"id":"pNB6fmtNSGXX","outputId":"ce7701f2-b66e-4ce4-e5fd-ff343408a032"},"outputs":[{"ename":"TypeError","evalue":"Portfolio.__init__() got an unexpected keyword argument 'trailing_stop_positive'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-30-975a0b53e2c2>\u001b[0m in \u001b[0;36m<cell line: 172>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    170\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    171\u001b[0m \u001b[0;31m# Backtesting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 172\u001b[0;31m pf = vbt.Portfolio.from_signals(\n\u001b[0m\u001b[1;32m    173\u001b[0m     \u001b[0mclose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'close'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    174\u001b[0m     \u001b[0mentries\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbuy_signal\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/site-packages/vectorbt/portfolio/base.py\u001b[0m in \u001b[0;36mfrom_signals\u001b[0;34m(cls, close, entries, exits, short_entries, short_exits, signal_func_nb, signal_args, size, size_type, price, fees, fixed_fees, slippage, min_size, max_size, size_granularity, reject_prob, lock_cash, allow_partial, raise_reject, log, accumulate, upon_long_conflict, upon_short_conflict, upon_dir_conflict, upon_opposite_entry, direction, val_price, open, high, low, sl_stop, sl_trail, tp_stop, stop_entry_price, stop_exit_price, upon_stop_exit, upon_stop_update, adjust_sl_func_nb, adjust_sl_args, adjust_tp_func_nb, adjust_tp_args, use_stops, init_cash, cash_sharing, call_seq, ffill_val_price, update_value, max_orders, max_logs, seed, group_by, broadcast_named_args, broadcast_kwargs, template_mapping, wrapper_kwargs, freq, attach_call_seq, **kwargs)\u001b[0m\n\u001b[1;32m   3010\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3011\u001b[0m         \u001b[0;31m# Create an instance\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3012\u001b[0;31m         return cls(\n\u001b[0m\u001b[1;32m   3013\u001b[0m             \u001b[0mwrapper\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3014\u001b[0m             \u001b[0mclose\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Portfolio.__init__() got an unexpected keyword argument 'trailing_stop_positive'"]}],"source":["# Define the range variables used in valuewhen\n","rangeUpper = 60\n","rangeLower = 5\n","def EWO(dataframe, ema_length=5, ema2_length=35):\n","    df = dataframe.copy()\n","    ema1 = ta.EMA(df['close'], timeperiod=ema_length)\n","    ema2 = ta.EMA(df['close'], timeperiod=ema2_length)\n","    emadif = (ema1 - ema2) / df['close'] * 100\n","    return emadif\n","\n","# Function to calculate valuewhen\n","# Function to calculate valuewhen\n","def valuewhen(dataframe, condition, source, occurrence):\n","    copy = dataframe.copy()\n","    copy['colFromIndex'] = np.arange(len(copy))\n","    copy = copy.sort_values(by=[condition, 'colFromIndex'], ascending=False).reset_index(drop=True)\n","    copy['valuewhen'] = np.where(copy[condition] > 0, copy[source].shift(-occurrence), copy[source])\n","    copy['barrsince'] = copy['colFromIndex'] - copy['colFromIndex'].shift(-occurrence)\n","    copy.loc[\n","        (\n","            (rangeLower <= copy['barrsince']) &\n","            (copy['barrsince'] <= rangeUpper)\n","        )\n","    , \"in_range\"] = 1\n","    copy['in_range'] = copy['in_range'].fillna(0)\n","    copy = copy.sort_values(by=['colFromIndex'], ascending=True).reset_index(drop=True)\n","    return copy['valuewhen'], copy['in_range']\n","\n","# Load historical data\n","# Assuming 'df' is your DataFrame with historical data and it includes 'timestamp', 'close', 'volume' columns\n","# Ensure 'timestamp' is the index and is of datetime type\n","\n","# Add indicators\n","df['RSI'] = ta.RSI(df['close'], timeperiod=14)\n","\n","# Correct the call to STOCH\n","stoch_k, stoch_d = ta.STOCH(df['high'], df['low'], df['close'], fastk_period=10, slowk_period=3, slowk_matype=0, slowd_period=3, slowd_matype=0)\n","df['slowk'] = stoch_k\n","df['slowd'] = stoch_d\n","df['osc'] = df['slowd']\n","\n","df['EWO'] = EWO(df, 50, 200)\n","df['ADX'] = ta.ADX(df['high'], df['low'], df['close'], timeperiod=14)\n","\n","# Calculate pivot lows and highs\n","df['min'] = df['osc'].rolling(5).min()\n","df['prevMin'] = np.where(df['min'] > df['min'].shift(), df['min'].shift(), df['min'])\n","df.loc[\n","    (\n","        (df['osc'].shift(1) == df['prevMin'].shift(1)) &\n","        (df['osc'] != df['prevMin'])\n","    )\n",", 'plFound'] = 1\n","\n","df['max'] = df['osc'].rolling(5).max()\n","df['prevMax'] = np.where(df['max'] < df['max'].shift(), df['max'].shift(), df['max'])\n","df.loc[\n","    (\n","    (df['osc'].shift(1) == df['prevMax'].shift(1)) &\n","    (df['osc'] != df['prevMax'])\n","    )\n",", 'phFound'] = 1\n","\n","# Regular Bullish\n","df['valuewhen_plFound_osc'], df['inrange_plFound_osc'] = valuewhen(df, 'plFound', 'osc', 1)\n","df.loc[\n","    (\n","        (df['osc'] > df['valuewhen_plFound_osc']) &\n","        (df['inrange_plFound_osc'] == 1)\n","     )\n",", 'oscHL'] = 1\n","\n","df['valuewhen_plFound_low'], df['inrange_plFound_low'] = valuewhen(df, 'plFound', 'low', 1)\n","df.loc[\n","    (df['low'] < df['valuewhen_plFound_low'])\n","    , 'priceLL'] = 1\n","\n","df.loc[\n","    (\n","        (df['priceLL'] == 1) &\n","        (df['oscHL'] == 1) &\n","        (df['plFound'] == 1)\n","    )\n","    , 'bullCond'] = 1\n","\n","# Hidden Bullish\n","df['valuewhen_plFound_osc'], df['inrange_plFound_osc'] = valuewhen(df, 'plFound', 'osc', 1)\n","df.loc[\n","    (\n","        (df['osc'] < df['valuewhen_plFound_osc']) &\n","        (df['inrange_plFound_osc'] == 1)\n","     )\n",", 'oscLL'] = 1\n","\n","df['valuewhen_plFound_low'], df['inrange_plFound_low'] = valuewhen(df, 'plFound', 'low', 1)\n","df.loc[\n","    (df['low'] > df['valuewhen_plFound_low'])\n","    , 'priceHL'] = 1\n","\n","df.loc[\n","    (\n","        (df['priceHL'] == 1) &\n","        (df['oscLL'] == 1) &\n","        (df['plFound'] == 1)\n","    )\n","    , 'hiddenBullCond'] = 1\n","\n","# Regular Bearish\n","df['valuewhen_phFound_osc'], df['inrange_phFound_osc'] = valuewhen(df, 'phFound', 'osc', 1)\n","df.loc[\n","    (\n","        (df['osc'] < df['valuewhen_phFound_osc']) &\n","        (df['inrange_phFound_osc'] == 1)\n","     )\n",", 'oscLH'] = 1\n","\n","df['valuewhen_phFound_high'], df['inrange_phFound_high'] = valuewhen(df, 'phFound', 'high', 1)\n","df.loc[\n","    (df['high'] > df['valuewhen_phFound_high'])\n","    , 'priceHH'] = 1\n","\n","df.loc[\n","    (\n","        (df['priceHH'] == 1) &\n","        (df['oscLH'] == 1) &\n","        (df['phFound'] == 1)\n","    )\n","    , 'bearCond'] = 1\n","\n","# Hidden Bearish\n","df['valuewhen_phFound_osc'], df['inrange_phFound_osc'] = valuewhen(df, 'phFound', 'osc', 1)\n","df.loc[\n","    (\n","        (df['osc'] > df['valuewhen_phFound_osc']) &\n","        (df['inrange_phFound_osc'] == 1)\n","     )\n",", 'oscHH'] = 1\n","\n","df['valuewhen_phFound_high'], df['inrange_phFound_high'] = valuewhen(df, 'phFound', 'high', 1)\n","df.loc[\n","    (df['high'] < df['valuewhen_phFound_high'])\n","    , 'priceLH'] = 1\n","\n","df.loc[\n","    (\n","        (df['priceLH'] == 1) &\n","        (df['oscHH'] == 1) &\n","        (df['phFound'] == 1)\n","    )\n","    , 'hiddenBearCond'] = 1\n","\n","# Define buy and sell signals\n","buy_signal = (\n","    (df['bullCond'] > 0) &\n","    (df['valuewhen_plFound_osc'] > 15) &\n","    (df['valuewhen_plFound_osc'] < 74) &\n","    (df['RSI'] < 53) &\n","    (df['RSI'] > 9) &\n","    (df['ADX'] > 41) &\n","    (df['ADX'] < 68) &\n","    (df['slowk'] < 64) &\n","    (df['slowk'] > 13) &\n","    (df['volume'] > 0)\n",")\n","\n","sell_signal = (\n","    (df['bearCond'] > 0) &\n","    (df['volume'] > 0)\n",")\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":543},"executionInfo":{"elapsed":62054,"status":"ok","timestamp":1718424328339,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"},"user_tz":-300},"id":"V2rwOiiAEMKZ","outputId":"dcf74449-4268-4a95-ebcc-4c037903c43a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Start                         1970-01-01 00:27:07.776000\n","End                           1970-01-01 00:28:38.422500\n","Period                                1048 days 20:10:00\n","Start Value                                      10000.0\n","End Value                                        10000.0\n","Total Return [%]                                     0.0\n","Benchmark Return [%]                           60.111334\n","Max Gross Exposure [%]                               0.0\n","Total Fees Paid                                      0.0\n","Max Drawdown [%]                                     NaN\n","Max Drawdown Duration                                NaT\n","Total Trades                                           0\n","Total Closed Trades                                    0\n","Total Open Trades                                      0\n","Open Trade PnL                                       0.0\n","Win Rate [%]                                         NaN\n","Best Trade [%]                                       NaN\n","Worst Trade [%]                                      NaN\n","Avg Winning Trade [%]                                NaN\n","Avg Losing Trade [%]                                 NaN\n","Avg Winning Trade Duration                           NaT\n","Avg Losing Trade Duration                            NaT\n","Profit Factor                                        NaN\n","Expectancy                                           NaN\n","Sharpe Ratio                                         inf\n","Calmar Ratio                                         NaN\n","Omega Ratio                                          inf\n","Sortino Ratio                                        inf\n","dtype: object\n"]}],"source":["\n","pf = vbt.Portfolio.from_signals(\n","    close=df['close'],\n","    entries=buy_signal,\n","    exits=sell_signal,\n","    init_cash=10000,\n","    freq='5m',  # 5 minutes\n","    sl_stop=-0.2,  # Stoploss at -20%\n","    sl_trail=True,\n","\n",")\n","\n","# Performance metrics\n","print(pf.stats())\n","\n","# Plot the results\n","pf.plot().show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aERiit_gUJGe"},"outputs":[],"source":["rsi_period = 14  # RSI period\n","df['RSI'] = talib.RSI(df['Close'].values, timeperiod=rsi_period)\n","\n","# Calculate Bollinger Bands using TA-Lib\n","bb_period = 20  # Bollinger Bands period\n","bb_std_dev = 2  # Standard deviation for Bollinger Bands\n","upper_band, middle_band, lower_band = talib.BBANDS(df['Close'].values, timeperiod=bb_period, nbdevup=bb_std_dev, nbdevdn=bb_std_dev)\n","\n","# Add Bollinger Bands to DataFrame\n","df['Upper Band'] = upper_band\n","df['Middle Band'] = middle_band\n","df['Lower Band'] = lower_band"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"766vhKDFWs8t"},"outputs":[],"source":["df['SMA20'] = talib.SMA(df['Close'].values, timeperiod=20)\n","df['SMA200'] = talib.SMA(df['Close'].values, timeperiod=200)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":481},"collapsed":true,"executionInfo":{"elapsed":5,"status":"ok","timestamp":1718228059842,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"},"user_tz":-300},"id":"Fg7JWuFOQnWS","outputId":"6fcd7694-26ee-47c8-a0c3-c5d34acb0380"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"},"text/html":["\n","  <div id=\"df-9413da2e-853f-4641-b545-5ecc7f1cf06c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Open Time</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Close Time</th>\n","      <th>Quote Asset Volume</th>\n","      <th>Number of Trades</th>\n","      <th>Taker Buy Base Asset Volume</th>\n","      <th>...</th>\n","      <th>R2_Daily</th>\n","      <th>S2_Daily</th>\n","      <th>R3_Daily</th>\n","      <th>S3_Daily</th>\n","      <th>RSI</th>\n","      <th>Upper Band</th>\n","      <th>Middle Band</th>\n","      <th>Lower Band</th>\n","      <th>SMA20</th>\n","      <th>SMA200</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2021-08-01 00:00:00</td>\n","      <td>41454.28</td>\n","      <td>41488.30</td>\n","      <td>41109.41</td>\n","      <td>41358.59</td>\n","      <td>21.140863</td>\n","      <td>2021-08-01 00:04:59.999</td>\n","      <td>872410.880044</td>\n","      <td>433</td>\n","      <td>11.531245</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2021-08-01 00:05:00</td>\n","      <td>41355.29</td>\n","      <td>41551.34</td>\n","      <td>41355.29</td>\n","      <td>41488.56</td>\n","      <td>4.721500</td>\n","      <td>2021-08-01 00:09:59.999</td>\n","      <td>195809.411916</td>\n","      <td>110</td>\n","      <td>3.437676</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2021-08-01 00:10:00</td>\n","      <td>41488.56</td>\n","      <td>41508.41</td>\n","      <td>41377.88</td>\n","      <td>41503.84</td>\n","      <td>2.459981</td>\n","      <td>2021-08-01 00:14:59.999</td>\n","      <td>101985.295034</td>\n","      <td>65</td>\n","      <td>1.274901</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021-08-01 00:15:00</td>\n","      <td>41487.78</td>\n","      <td>41558.65</td>\n","      <td>41457.12</td>\n","      <td>41535.73</td>\n","      <td>1.549756</td>\n","      <td>2021-08-01 00:19:59.999</td>\n","      <td>64306.439251</td>\n","      <td>28</td>\n","      <td>0.651710</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021-08-01 00:20:00</td>\n","      <td>41562.04</td>\n","      <td>41646.60</td>\n","      <td>41556.11</td>\n","      <td>41599.69</td>\n","      <td>2.379079</td>\n","      <td>2021-08-01 00:24:59.999</td>\n","      <td>98961.934668</td>\n","      <td>74</td>\n","      <td>1.197269</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9413da2e-853f-4641-b545-5ecc7f1cf06c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9413da2e-853f-4641-b545-5ecc7f1cf06c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9413da2e-853f-4641-b545-5ecc7f1cf06c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-06764ca6-a514-4061-a8c1-b617bb61a75f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-06764ca6-a514-4061-a8c1-b617bb61a75f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-06764ca6-a514-4061-a8c1-b617bb61a75f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["            Open Time      Open      High       Low     Close     Volume  \\\n","0 2021-08-01 00:00:00  41454.28  41488.30  41109.41  41358.59  21.140863   \n","1 2021-08-01 00:05:00  41355.29  41551.34  41355.29  41488.56   4.721500   \n","2 2021-08-01 00:10:00  41488.56  41508.41  41377.88  41503.84   2.459981   \n","3 2021-08-01 00:15:00  41487.78  41558.65  41457.12  41535.73   1.549756   \n","4 2021-08-01 00:20:00  41562.04  41646.60  41556.11  41599.69   2.379079   \n","\n","               Close Time  Quote Asset Volume  Number of Trades  \\\n","0 2021-08-01 00:04:59.999       872410.880044               433   \n","1 2021-08-01 00:09:59.999       195809.411916               110   \n","2 2021-08-01 00:14:59.999       101985.295034                65   \n","3 2021-08-01 00:19:59.999        64306.439251                28   \n","4 2021-08-01 00:24:59.999        98961.934668                74   \n","\n","   Taker Buy Base Asset Volume  ...  R2_Daily S2_Daily  R3_Daily  S3_Daily  \\\n","0                    11.531245  ...       NaN      NaN       NaN       NaN   \n","1                     3.437676  ...       NaN      NaN       NaN       NaN   \n","2                     1.274901  ...       NaN      NaN       NaN       NaN   \n","3                     0.651710  ...       NaN      NaN       NaN       NaN   \n","4                     1.197269  ...       NaN      NaN       NaN       NaN   \n","\n","   RSI  Upper Band  Middle Band  Lower Band  SMA20  SMA200  \n","0  NaN         NaN          NaN         NaN    NaN     NaN  \n","1  NaN         NaN          NaN         NaN    NaN     NaN  \n","2  NaN         NaN          NaN         NaN    NaN     NaN  \n","3  NaN         NaN          NaN         NaN    NaN     NaN  \n","4  NaN         NaN          NaN         NaN    NaN     NaN  \n","\n","[5 rows x 25 columns]"]},"execution_count":51,"metadata":{},"output_type":"execute_result"}],"source":["df.dropna()\n","\n","df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"collapsed":true,"executionInfo":{"elapsed":446,"status":"error","timestamp":1718225710138,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"},"user_tz":-300},"id":"IG_oL2wTOHmk","outputId":"d56e3ae5-0430-4cb1-d37e-c8c321684f5d"},"outputs":[{"ename":"KeyError","evalue":"'Datetime'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3805\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3806\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Datetime'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-00182ad12503>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Datetime'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mpivot_points\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Pivot'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'R1'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'S1'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'R2'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'S2'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'R3'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'S3'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpivot_points\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft_on\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright_on\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'left'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Drop the 'Date' column as it's no longer needed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4100\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4101\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4102\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4103\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4104\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3810\u001b[0m             ):\n\u001b[1;32m   3811\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3812\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3813\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3814\u001b[0m             \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Datetime'"]}],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rNLXx2jaT-V_"},"outputs":[],"source":["long_condition = (\n","       ((df['Close'] > df['R1_Daily']) | (df['Close'] > df['R2_Daily']) | (df['Close'] > df['R3_Daily']))\n","\n","\n","\n","\n","    )"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uFSohZ6OWmOE"},"outputs":[],"source":["exit_condition = ()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":396,"status":"ok","timestamp":1718228071809,"user":{"displayName":"Ghaffar Elahi","userId":"03211535299359125772"},"user_tz":-300},"id":"qGr_PYnAWos2","outputId":"5f234c45-7380-4e4a-8aa9-25b654263b71"},"outputs":[{"name":"stdout","output_type":"stream","text":["Start                                                 0\n","End                                              301415\n","Period                               1046 days 14:00:00\n","Start Value                                       100.0\n","End Value                                     95.863041\n","Total Return [%]                              -4.136959\n","Benchmark Return [%]                          65.370169\n","Max Gross Exposure [%]                            100.0\n","Total Fees Paid                                     0.0\n","Max Drawdown [%]                              49.569796\n","Max Drawdown Duration                 965 days 23:05:00\n","Total Trades                                        310\n","Total Closed Trades                                 310\n","Total Open Trades                                     0\n","Open Trade PnL                                      0.0\n","Win Rate [%]                                  34.193548\n","Best Trade [%]                                 8.270872\n","Worst Trade [%]                               -4.412136\n","Avg Winning Trade [%]                          4.175008\n","Avg Losing Trade [%]                          -2.103175\n","Avg Winning Trade Duration    2 days 05:14:11.886792452\n","Avg Losing Trade Duration     1 days 04:50:27.941176470\n","Profit Factor                                  0.988856\n","Expectancy                                    -0.013345\n","Sharpe Ratio                                   0.120994\n","Calmar Ratio                                  -0.029507\n","Omega Ratio                                    1.001768\n","Sortino Ratio                                  0.170232\n","dtype: object\n","Total Return:  -0.04136958772649692\n"]}],"source":["\n","\n","\n","\n","portfolio = vbt.Portfolio.from_signals(df['Close'], entries=long_condition,sl_stop=0.03,tp_stop=0.06 , sl_trail=True,freq=timeperiod)\n","\n","\n","\n","\n","stats = portfolio.stats()\n","print(stats)\n","# Print the total return\n","total_return = portfolio.total_return()\n","print(\"Total Return: \", total_return)"]}],"metadata":{"colab":{"toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyPoagrCClJhvfGnXclEYlhJ"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}